<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sakanal.MyBatis.C_Mapper.mapper.UserMapper">
    <select id="getUserById" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from `user`
            where id=#{id}
    </select>
    <!--resultTypr：如果返回的是一个集合，要写集合中元素的类型-->
    <select id="getUserAll" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from `user`
    </select>
    <select id="getUserById1AndId2" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from `user`
            where id>#{id1} and id&lt;#{id2}
            <!--
              1、param1...N
              2、在UserMapper中(@param("id")Integer id,@param("name")String name)
              3、直接传入pojo
              4、直接传map
              5、编写TO（Transfer Object）数据
            -->
    </select>
    <select id="getUserByIdForMap" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from ${tableName}
            where id>#{id1} and id&lt;#{id2}
    </select>
    <select id="getUserByIdReturnMap" resultType="map">
        select * from `user` where id=#{id}
    </select>
    <select id="getUserByAddressLikeReturnMap" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from `user` where address like #{address}
    </select>


    <!--
        parameterType可以省略
        获取自增的主键值
        mysql支持自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()获取
            useGeneratedKeys="true"：使用自增主键获取主键值策略
            keyProperty="id"：指定对应的主键属性，也就是mybatis获取到主键值后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" databaseId="mysql">
        insert into `user`(id,name,password,address,phone)
            value(#{id},#{name},#{password},#{address},#{phone})
    </insert>
    <insert id="insertUser1" parameterType="user">
        <!--
            编写查询主键的sql语句
            kyProperty：查出的主键值封装给JavaBean的哪个属性
            order=“BEFORE”：当前sql在插入sql之前运行
            resultType：查出数据的返回值类型
            BEFORE运行顺序：
                先运行selectKey查询id的sql；查出id值封装给javabean的id属性
                再运行插入的sql；就可以取出id值对应的值
            AFTER运行顺序：
                先运行插入的sql；
                再运行selcetKey查询id的sql；查出的id值封装给javabean的id属性
        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!--编写查询主键的sql语句-->
            select max(id) from `user`
        </selectKey>
        insert into `user`(id,name,password,address,phone)
            value(#{id},#{name},#{password},#{address},${phone})
    </insert>




    <update id="updateUser">
        update `user`
            set name=#{name},password=#{password},address=#{address},phone=#{phone}
            where id=#{id}
    </update>




    <delete id="deleteUserById">
        delete from `user`
            where id=#{id}
    </delete>
</mapper>