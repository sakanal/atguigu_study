<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--希望管理所有的业务逻辑组件-->
    <context:component-scan base-package="com.sakanal.MyBatis.F_SSM.service">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--spring用来控制业务逻辑，数据源、事务、aop-->

    <!--扫描包-->
<!--    <context:component-scan base-package="com.sakanal.MyBatis.F_SSM.dao"/>-->
    <!--导入数据库包-->
    <context:property-placeholder location="classpath:com/sakanal/MyBatis/F_SSM/config/jdbc.properties"/>
    <!--加载连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- spring事务管理 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!--
        整合mybatis
            目的：1、spring管理所有组件。mapper的实现类。
                    service==>Dao   @Autowired:自动注入mapper；
                2、spring用来管理事务，spring声明式事务
        -->
    <!--创建出SqlSessionFactory对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- configLocation指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:com/sakanal/MyBatis/F_SSM/config/mybatis-config.xml"></property>
        <!--mapperLocations: 指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:com/sakanal/MyBatis/F_SSM/config/mapper/*.xml"></property>
    </bean>

    <!--配置一个可以进行批量执行的sqlSession  -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入；
         base-package：指定mapper接口的包名
     -->
    <mybatis-spring:scan base-package="com.sakanal.MyBatis.F_SSM.dao"/>

    <!--MapperScannerConfigurer：扫描指定包中的接口并将它们直接注册为MapperFactoryBean-->
    <!--使用MapperScannerConfigurer可以不用为每一个Mapper进行配置；可以直接使用*Mapper，而不需要通过sqlSession.getMapper()-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sakanal.MyBatis.F_SSM.dao"></property>
    </bean>

</beans>