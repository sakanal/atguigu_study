<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sakanal.MyBatis.E_Cache.mapper.UserMapper">
    <!--
        eviction：缓存的回收策略
            LRU – 最近最少使用：移除最长时间不被使用的对象。
            FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
            SOFT - 软引用：移除基于垃圾回收器状态和软引用规则的对象
            WEAK - 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象
            默认是LRU
        flushInterval：缓存刷新间隔
		    缓存多长时间清空一次，默认不清空，设置一个毫秒值
	    readOnly:是否只读：
		    true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                      mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
				      user1==user1   ==> true
	    	false：非只读：mybatis觉得获取的数据可能会被修改。
				         mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
				         user1==user1   ==> false
	    size：缓存存放多少元素；
	    type=""：指定自定义缓存的全类名；
	    		实现Cache接口即可；
    -->
<!--    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

    <resultMap id="MyUser" type="com.sakanal.MyBatis.E_Cache.pojo.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="password" property="password"/>
        <result column="gender" property="gender"/>
        <result column="address" property="address"/>
        <result column="phone" property="phone"/>
        <association property="department"
                     select="com.sakanal.MyBatis.E_Cache.mapper.DepartmentMapper.getDepartmentById"
                     column="department_id">
        </association>
    </resultMap>
    <select id="getUserById" resultMap="MyUser">
        select * from `user` where id=#{id}
    </select>
    <select id="getUser" resultType="com.sakanal.MyBatis.E_Cache.pojo.User">
        select <include refid="userInfo"/> from `user`
    </select>
    <sql id="userInfo">
        id,name,password,gender,address,phone
    </sql>
</mapper>