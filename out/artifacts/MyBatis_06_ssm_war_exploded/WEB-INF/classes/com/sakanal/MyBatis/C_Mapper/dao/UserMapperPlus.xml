<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sakanal.MyBatis.C_Mapper.mapper.UserMapperPlus">
    <!--
        自定义某个javabean的封装规则:
        type：自定义规则的java类型（全名/别名；推荐使用全类名）
        id：唯一id方便引用
    -->
    <resultMap id="MyUserSimple" type="com.sakanal.MyBatis.C_Mapper.bean.User">
        <!--
            指定主键的封装规则：
            id：定义主键会底层优化
            column：指定哪一列
            property：指定对应的javabean的属性
        -->
        <id column="id" property="id"/>
        <!--定义普通列封装规则-->
        <result column="name" property="name"/>
        <!--其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上-->
    </resultMap>
    <!--resultMap：可以自定义结果集映射规则-->
    <select id="getUserById" resultMap="MyUserSimple">
        select * from `user` where id=#{id}
    </select>


    <!--
        场景一：
            查询User的同时查询员工对应的部门
            User====Department
            一个员工有与之对应的部门信息
            id  name    password    address    phone    d_id
            department_id    department_name
    -->
    <!--联合查询：级联属性封装结果集-->
    <resultMap id="MyUserPlus1" type="com.sakanal.MyBatis.C_Mapper.bean.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="password" property="password"/>
        <result column="address" property="address"/>
        <result column="phone" property="phone"/>
        <result column="department_id" property="department.id"/>
        <result column="department_name" property="department.name"/>
    </resultMap>

    <!--使用association定义关联的单个对象的封装规则(对象类型的属性)-->
    <resultMap id="MyUserPlus2" type="com.sakanal.MyBatis.C_Mapper.bean.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="password" property="password"/>
        <result column="address" property="address"/>
        <result column="phone" property="phone"/>
        <!--
            association可以指定联合的javabean对象
                property="department"
                javaType：指定这个属性对象的类型【不能省略】
        -->
        <association property="department" javaType="com.sakanal.MyBatis.C_Mapper.bean.Department">
            <id column="department_id" property="id"/>
            <result column="department_name" property="name"/>
        </association>
    </resultMap>
    <select id="getUserAndDept" resultMap="MyUserPlus2">
        select `user`.id id,name,password,address,phone,`department`.id department_id,department_name
        from `user`,`department`
        where `user`.department_id=department.id and `user`.id=#{id}
    </select>

    <!--
        使用association进行分步查询
        1、先按照员工id查询员工信息
        2、根据查询员工信息中的department_id值去部门表查出部门信息
        3、部门设置到员工中
    -->
    <resultMap id="MyUserByStep" type="com.sakanal.MyBatis.C_Mapper.bean.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="password" property="password"/>
        <result column="address" property="address"/>
        <result column="phone" property="phone"/>
        <!--select：表明当前属性是调用select指定的方法查出的结果-->
        <!--column：指定将那一列的值传给这个方法-->
        <!--流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性-->
        <association property="department"
                     select="com.sakanal.MyBatis.C_Mapper.mapper.DepartmentMapper.getDepartmentById"
                     column="department_id">
        </association>
    </resultMap>
    <select id="getUserByIdStep" resultMap="MyUserByStep">
        select * from `user` where id=#{id}
    </select>

    <!--  可以使用延时加载（懒加载）：按需加载
        User===>Department
            每次查询User对象的时候，都会将Department对象一起查询出来
            部门信息可以在我们需要使用的的时候再去查询
            再分步查询的基础上加上两个配置
      -->





    <!--
        场景二：查询部门的时候将部门对应的所有员工信息也查询出来（注释在DepartmentMapper.xml中）
    -->

    <select id="getUserByDeptId" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
        select * from `user` where department_id=#{department_id}
    </select>

    <!--
        <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装User
            如果是女生，将部门信息查询出来，否则不查询
            如果是男生，将address这一列的值赋值给phone
    -->
    <resultMap id="MyUserDis" type="com.sakanal.MyBatis.C_Mapper.bean.User">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="password" property="password"/>
        <result column="address" property="address"/>
        <result column="phone" property="phone"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型
        -->
        <discriminator javaType="string" column="gender">
            <!--女生    resultType（不能缺少）：指定封装的结果类型-->
            <case value="0" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
                <association property="department"
                             select="com.sakanal.MyBatis.C_Mapper.mapper.DepartmentMapper.getDepartmentById"
                             column="department_id">
                </association>
            </case>
            <!--男生    resultType（不能缺少）：指定封装的结果类型-->
            <case value="1" resultType="com.sakanal.MyBatis.C_Mapper.bean.User">
                <id column="id" property="id"/>
                <result column="name" property="name"/>
                <result column="gender" property="gender"/>
                <result column="password" property="password"/>
                <result column="address" property="address"/>
                <result column="address" property="phone"/>
            </case>
        </discriminator>
    </resultMap>
    <select id="getUserByIdDis" resultMap="MyUserDis">
        select * from `user` where id=#{id}
    </select>





</mapper>